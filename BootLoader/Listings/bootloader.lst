C51 COMPILER V9.00   BOOTLOADER                                                            06/12/2016 16:54:33 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE BOOTLOADER
OBJECT MODULE PLACED IN .\Objects\bootloader.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE bootloader.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\bootloader.lst) OBJ
                    -ECT(.\Objects\bootloader.obj)

line level    source

   1          #include "IAP15W4K61S4.h"
   2          #include <intrins.H>
   3          #include <string.h>
   4          //#define RESETSYSTEM()    ((void (code *)())0xF3F0)() //复位入口
   5          #define USERAP()                 ((void (code *)())0x1000)() //用户程序起始地址
   6          
   7          
   8          #define USER_APP_ADDR 0x1000
   9                  //定义一个函数指针，用于跳转到用户程序
  10          
  11          
  12          typedef unsigned long ULONG;
  13          typedef unsigned int UINT;
  14          typedef unsigned char UCHAR;
  15          typedef ULONG FLADDR;
  16          
  17          #define FOSC 22118400L          //时钟频率
  18          #define BAUD 115200             //波特率
  19          
  20          #define S1_S0 0x40              //P_SW1.6
  21          #define S1_S1 0x80              //P_SW1.7
  22          
  23          
  24          
  25          /*定义Flash 操作等待时间及允许IAP/ISP/EEPROM 操作的常数*/
  26          /*#define ENABLE_ISP 0x80*/ //系统工作时钟<30MHz 时，对IAP_CONTR 寄存器设置此值
  27          #define ENABLE_ISP 0x81 //系统工作时钟<24MHz 时，对IAP_CONTR 寄存器设置此值
  28          /*#define ENABLE_ISP 0x82*/ //系统工作时钟<20MHz 时，对IAP_CONTR 寄存器设置此值
  29          /*#define ENABLE_ISP 0x83*/ //系统工作时钟<12MHz 时，对IAP_CONTR 寄存器设置此值
  30          /*#define ENABLE_ISP 0x84*/ //系统工作时钟<6MHz 时，对IAP_CONTR 寄存器设置此值
  31          /*#define ENABLE_ISP 0x85*/ //系统工作时钟<3MHz 时，对IAP_CONTR 寄存器设置此值
  32          /*#define ENABLE_ISP 0x86*/ //系统工作时钟<2MHz 时，对IAP_CONTR 寄存器设置此值
  33          /*#define ENABLE_ISP 0x87*/ //系统工作时钟<1MHz 时，对IAP_CONTR 寄存器设置此值
  34          /****************************************************************************/
  35          
  36          //const unsigned char code welcome[]="welcome to SmartEntery System BootLoader!";
  37          
  38          #define SysCordAppUpdataFlag 0x7E00
  39          #define UpdataFlag0 0x5A/*是否升级判断标志 0x5a 0xa5*/
  40          #define UpdataFlag1 0xA5
  41          #define SysCordStartAddr 0x1000 /*程序应用区的起始地址*/
  42          #define SysCordEndAddr 0x7200 /*程序应用区的结束地址*/
  43          #define SysCordAppSaveStartTempAddr 0x8000 /*程序应用区暂存的起始地址*/
  44          
  45          
  46          
  47          /*内部FLASH函数声明区*/
  48          void IAP_Disable();/*关闭IAP 功能*/
  49          void FLASH_ByteWrite (FLADDR addr, char byte);
  50          unsigned char FLASH_ByteRead (FLADDR addr);
  51          void FLASH_PageErase (FLADDR addr);
  52          //UCHAR sequential_write_flash_in_one_sector(UINT begin_addr, UINT counter,UCHAR array[]);
  53          void Btlder_init_Uart1(void);
  54          //void UART_Send(unsigned char *dat,unsigned int len);
C51 COMPILER V9.00   BOOTLOADER                                                            06/12/2016 16:54:33 PAGE 2   

  55          void btlder(void);
  56          void Delay_ms(UINT ms);
  57          //void (*boot)() = USER_APP_ADDR;
  58          
  59          //?PR?*?UPDATEMOUDLE(0x0F000)
  60          
  61          void main(void){
  62   1      //ULONG i;
  63   1      
  64   1              //bootloader里不能开启中断
  65   1              EA = 0;
  66   1              Btlder_init_Uart1();//串口1初始化
  67   1      //       SBUF = 0x09;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
  68   1      
  69   1      //      UART_Send(welcome,sizeof(welcome));
  70   1              
  71   1      //      for(i=0x1000;i<0x1200;i++){
  72   1      //       SBUF = FLASH_ByteRead(i);while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
  73   1      //      }
  74   1              btlder();
  75   1              USERAP();//从用户区启动
  76   1              while(1);
  77   1      }
  78          
  79          
  80          void Btlder_init_Uart1(void)
  81          {
  82   1      ACC = P_SW1;
  83   1      ACC &= ~(S1_S0 | S1_S1);    //S1_S0=0 S1_S1=0
  84   1      P_SW1 = ACC;                //(P3.0/RxD, P3.1/TxD)
  85   1      SCON = 0x50;                                                            //1010000
  86   1      T2L = (65536 - (FOSC/4/BAUD));   //设置波特率重装值
  87   1      T2H = (65536 - (FOSC/4/BAUD))>>8;
  88   1      AUXR = 0x14;                                                            //T2为1T模式, 并启动定时器2 10100
  89   1      AUXR |= 0x01;               //选择定时器2为串口1的波特率发生器
  90   1      }
  91          
  92          
  93          
  94          void btlder(void)
  95           {
  96   1      unsigned int Addr_j,UpdatePacNum ;
  97   1      unsigned char UART_DATA_buf = 0,UART_DATA_buf0 = 0,IAP_UpdatePacNum=0;
  98   1      
  99   1      //       SBUF = 0xf0;while(!(SCON&0x02));SCON &= ~ 0x02;
 100   1       /********************************************************************/
 101   1       /*上电读取程序是否修改，修改则更新程序，不修改，则继续执行          */
 102   1       UART_DATA_buf=FLASH_ByteRead (SysCordAppUpdataFlag);
 103   1       UART_DATA_buf0=FLASH_ByteRead ((SysCordAppUpdataFlag+1));
 104   1       IAP_UpdatePacNum = FLASH_ByteRead (SysCordAppUpdataFlag+2);
 105   1      //       SBUF = UART_DATA_buf;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 106   1      //       SBUF = UART_DATA_buf0;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 107   1      //       SBUF = IAP_UpdatePacNum;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 108   1       if((UART_DATA_buf==UpdataFlag0)&&(UART_DATA_buf0==UpdataFlag1))/*如果相等则更新源程序*/
 109   1       {/*擦除程序区*/
 110   2      //SBUF = 0xf1;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 111   2      
 112   2         for(Addr_j=SysCordStartAddr;Addr_j<SysCordEndAddr;Addr_j+=0x200)             //根据包的数量更新用户程序区
 113   2         { 
 114   3                       FLASH_PageErase (Addr_j);      
 115   3      //               SBUF = Addr_j>>8;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 116   3      //               SBUF = Addr_j;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
C51 COMPILER V9.00   BOOTLOADER                                                            06/12/2016 16:54:33 PAGE 3   

 117   3               }
 118   2                      for(UpdatePacNum = 0;UpdatePacNum<IAP_UpdatePacNum;UpdatePacNum++)
 119   2               {
 120   3                       //SBUF = UpdatePacNum;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 121   3                                      for(Addr_j=0;Addr_j<0x200;Addr_j++)
 122   3                       {
 123   4                              UART_DATA_buf=FLASH_ByteRead(SysCordAppSaveStartTempAddr+Addr_j+UpdatePacNum*0x200);
 124   4                              FLASH_ByteWrite(SysCordStartAddr+Addr_j+UpdatePacNum*0x200, UART_DATA_buf);
 125   4      //                      SBUF = UART_DATA_buf;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 126   4                       }
 127   3      //                       for(Addr_j = 0;Addr_j<8;Addr_j++){
 128   3      //       SBUF = 0x00;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 129   3      //       }
 130   3                              Delay_ms(50);
 131   3                              FLASH_PageErase (SysCordAppSaveStartTempAddr+UpdatePacNum*0x200);                                                               //擦除临时储存区                                        
 132   3      //                SBUF = 0xf2;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();_nop_();
 133   3               }
 134   2      
 135   2      
 136   2               
 137   2      //       SBUF = 0xf3;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 138   2          FLASH_PageErase(SysCordAppUpdataFlag); 
 139   2               
 140   2      //       for(Addr_j = 0;Addr_j<8;Addr_j++){
 141   2      //       SBUF = 0x88;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 142   2      //       }
 143   2      
 144   2               
 145   2                      IAP_CONTR = 0x20;//重启
 146   2         }
 147   1       
 148   1      //       SBUF = 0xf4;while(!(SCON&0x02));SCON &= ~ 0x02;_nop_();
 149   1      //   UART_DATA_buf=0;
 150   1      //   Addr_j=0;
 151   1              
 152   1               USERAP();//从用户区启动
 153   1              
 154   1       }
 155           
 156           
 157           
 158          void FLASH_ByteWrite (FLADDR addr, char byte) 
 159          {
 160   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
 161   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
 162   1          IAP_ADDRH = (addr&0xff00)>>8;    //设置目标单元地址的高8 位地址
 163   1          IAP_ADDRL = (addr&0xff);    //设置目标单元地址的低8 位地址
 164   1      
 165   1          IAP_DATA = byte;                  //要编程的数据先送进IAP_DATA 寄存器
 166   1      //              EA=0;
 167   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
 168   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
 169   1                              _nop_();
 170   1      //              EA=1;   
 171   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 172   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 173   1      }
 174          /****************************************************************************/
 175          /* FLASH_ByteRead                                                           */ 
 176          /*This routine reads a <byte> from the linear FLASH address <addr>.         */ 
 177          /*                                                                          */ 
 178          /****************************************************************************/
C51 COMPILER V9.00   BOOTLOADER                                                            06/12/2016 16:54:33 PAGE 4   

 179          unsigned char FLASH_ByteRead (FLADDR addr)
 180          {
 181   1          IAP_DATA = 0x00;
 182   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
 183   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
 184   1      
 185   1          IAP_ADDRH = (addr&0xff00)>>8;    //设置目标单元地址的高8 位地址
 186   1          IAP_ADDRL = (addr&0xff);    //设置目标单元地址的低8 位地址
 187   1      
 188   1      //              EA=0;
 189   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
 190   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
 191   1                      _nop_(); 
 192   1      //              EA=1;
 193   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 194   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 195   1          return (IAP_DATA);
 196   1      }
 197          
 198          
 199          
 200          /****************************************************************************/
 201          /* FLASH_PageErase                                                          */ 
 202          /*This routine erases the FLASH page containing the linear FLASH addres     */ 
 203          /* <addr>.                                                                  */ 
 204          /****************************************************************************/
 205          void FLASH_PageErase (FLADDR addr)
 206          {
 207   1              
 208   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
 209   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
 210   1      
 211   1          IAP_ADDRH = (addr&0xff00)>>8;    //设置目标单元地址的高8 位地址
 212   1          IAP_ADDRL = (addr&0xff);    //设置目标单元地址的低8 位地址
 213   1      
 214   1      //              EA=0;
 215   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
 216   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
 217   1          _nop_();
 218   1      
 219   1      //              EA=1;
 220   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 221   1              //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 222   1      }
 223          void IAP_Disable()
 224          {
 225   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 226   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 227   1          IAP_CONTR = 0;      //关闭IAP 功能
 228   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
 229   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
 230   1          IAP_ADDRH = 0x80;
 231   1          IAP_ADDRL = 0;
 232   1      }
 233          
 234          void Delay_ms(UINT ms){
 235   1      UINT k;
 236   1      unsigned char i, j;
 237   1      for(k=0;k<ms;k++){
 238   2              _nop_();
 239   2              _nop_();
 240   2              i = 22;
C51 COMPILER V9.00   BOOTLOADER                                                            06/12/2016 16:54:33 PAGE 5   

 241   2              j = 128;
 242   2              do
 243   2              {
 244   3                      while (--j);
 245   3              } while (--i);
 246   2      }
 247   1      
 248   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    455    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
