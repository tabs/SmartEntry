C51 COMPILER V9.54   UPDATEMOUDLE                                                          03/20/2016 12:50:11 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UPDATEMOUDLE
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE UpdateMoudle.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\UpdateMoudle.lst) TABS(2) SRC(.\Objects\UpdateMoudle.SRC)

line level    source

   1          #include "IAP15W4K61S4.h"
   2          #include <intrins.H>
   3          #include <string.h>
   4          
   5          
   6          typedef unsigned long ULONG;
   7          typedef unsigned int UINT;
   8          typedef unsigned char UCHAR;
   9          typedef ULONG FLADDR;
  10          
  11          #define ERROR   0
  12          #define OK      1
  13          
  14          
  15          //#define ENABLE_IAP 0x80           //if SYSCLK<30MHz
  16          #define ENABLE_IAP 0x81           //if SYSCLK<24MHz
  17          //#define ENABLE_IAP  0x82          //if SYSCLK<20MHz
  18          //#define ENABLE_IAP 0x83           //if SYSCLK<12MHz
  19          //#define ENABLE_IAP 0x84           //if SYSCLK<6MHz
  20          //#define ENABLE_IAP 0x85           //if SYSCLK<3MHz
  21          //#define ENABLE_IAP 0x86           //if SYSCLK<2MHz
  22          //#define ENABLE_IAP 0x87           //if SYSCLK<1MHz
  23          
  24          //#define USED_BYTE_QTY_IN_ONE_SECTOR   1
  25          //#define USED_BYTE_QTY_IN_ONE_SECTOR   2
  26          //#define USED_BYTE_QTY_IN_ONE_SECTOR   4
  27          //#define USED_BYTE_QTY_IN_ONE_SECTOR   8
  28          //#define USED_BYTE_QTY_IN_ONE_SECTOR   16
  29          //#define USED_BYTE_QTY_IN_ONE_SECTOR   32
  30          //#define USED_BYTE_QTY_IN_ONE_SECTOR   64
  31          //#define USED_BYTE_QTY_IN_ONE_SECTOR   128
  32          //#define USED_BYTE_QTY_IN_ONE_SECTOR   256
  33          #define USED_BYTE_QTY_IN_ONE_SECTOR   512
  34          
  35          
  36          #define SysCordAppUpdataFlag 0xEE00
  37          #define UpdataFlag0 0x5a/*是否升级判断标志 0x5a 0xa5*/
  38          #define UpdataFlag1 0xa5/*是否升级判断标志 0xa5 0x5a*/
  39          #define SysCordStartAddr 0x400 /*程序应用区的起始地址*/
  40          #define SysCordEndAddr 0x7400 /*程序应用区的结束地址*/
  41          #define SysCordAppSaveStartTempAddr 0x8000 /*程序应用区暂存的起始地址*/
  42          
  43          #define CMD_IDLE    0               //空闲模式
  44          #define CMD_READ    1               //IAP字节读命令
  45          #define CMD_PROGRAM 2               //IAP字节编程命令
  46          #define CMD_ERASE   3               //IAP扇区擦除命令
  47          
  48          //UCHAR xdata protect_buffer[USED_BYTE_QTY_IN_ONE_SECTOR];
  49          
  50          
  51          unsigned int System_Bufstart = 0;
  52          unsigned char UART_DATA_bufStart = 0;
  53          unsigned char UART_DATA_bufStart0 = 0;
  54          
C51 COMPILER V9.54   UPDATEMOUDLE                                                          03/20/2016 12:50:11 PAGE 2   

  55          void IapIdle();
  56          extern UCHAR IapReadByte(UINT addr);
  57          extern void IapProgramByte(UINT addr, UCHAR dat);
  58          extern void IapEraseSector(UINT addr);
  59          extern UINT sequential_write_flash_in_one_sector(UINT begin_addr, UINT counter, UCHAR array[]);
  60          extern UINT write_flash_with_protect_in_one_sector(UINT begin_addr, UINT counter, UCHAR array[]);
  61          void btlder(void);
  62          
  63          
  64          //?PR?*?UPDATEMOUDLE(0x0F000)
  65          
  66          
  67          
  68          
  69          
  70          //   #pragma asm
  71          //   ORG 0F000H
  72          //   #pragma endasm
  73          
  74          
  75          void btlder(void)
  76           {EA=0;
  77   1       /********************************************************************/
  78   1       /*上电读取程序是否修改，修改则更新程序，不修改，则继续执行          */
  79   1       UART_DATA_bufStart=IapReadByte (SysCordAppUpdataFlag);
  80   1       UART_DATA_bufStart0=IapReadByte ((SysCordAppUpdataFlag+1));
  81   1       if((UART_DATA_bufStart==UpdataFlag0)&&(UART_DATA_bufStart0==UpdataFlag1))/*如果相等则更新源程序*/
  82   1       {/*擦除程序区*/
  83   2         for(System_Bufstart=SysCordStartAddr;System_Bufstart<SysCordEndAddr;System_Bufstart=System_Bufstart+0x2
             -00)
  84   2         {IapEraseSector (System_Bufstart);}
  85   2         for(System_Bufstart=0x0;System_Bufstart<(SysCordEndAddr-0x400);System_Bufstart++)
  86   2         {UART_DATA_bufStart=IapReadByte(SysCordAppSaveStartTempAddr+System_Bufstart);
  87   3          IapProgramByte(System_Bufstart+SysCordStartAddr, UART_DATA_bufStart);}
  88   2          IapEraseSector(SysCordAppUpdataFlag); 
  89   2         }
  90   1       
  91   1      
  92   1         UART_DATA_bufStart=0;
  93   1         System_Bufstart=0;
  94   1         EA=1;
  95   1         /*#pragma asm
  96   1         DEC SP
  97   1         DEC SP
  98   1         LJMP 403H
  99   1         #pragma endasm*/
 100   1      //   
 101   1      //   #pragma asm
 102   1      //   LJMP 0F200H
 103   1      //   #pragma endasm
 104   1      
 105   1       }
 106          /*----------------------------
 107          关闭IAP
 108          ----------------------------*/
 109          void IapIdle()
 110          {
 111   1          IAP_CONTR = 0;                  //关闭IAP功能
 112   1          IAP_CMD = 0;                    //清除命令寄存器
 113   1          IAP_TRIG = 0;                   //清除触发寄存器
 114   1          IAP_ADDRH = 0x80;               //将地址设置到非IAP区域
 115   1          IAP_ADDRL = 0;
C51 COMPILER V9.54   UPDATEMOUDLE                                                          03/20/2016 12:50:11 PAGE 3   

 116   1      }
 117          
 118          /*----------------------------
 119          从ISP/IAP/EEPROM区域读取一字节
 120          ----------------------------*/
 121          UCHAR IapReadByte(UINT addr)
 122          {
 123   1          UCHAR dat;                       //数据缓冲区
 124   1      
 125   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
 126   1          IAP_CMD = CMD_READ;             //设置IAP命令
 127   1          IAP_ADDRL = addr;               //设置IAP低地址
 128   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
 129   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
 130   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
 131   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
 132   1          dat = IAP_DATA;                 //读ISP/IAP/EEPROM数据
 133   1          IapIdle();                      //关闭IAP功能
 134   1      
 135   1          return dat;                     //返回
 136   1      }
 137          
 138          /*----------------------------
 139          写一字节数据到ISP/IAP/EEPROM区域
 140          ----------------------------*/
 141          void IapProgramByte(UINT addr, UCHAR dat)
 142          {
 143   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
 144   1          IAP_CMD = CMD_PROGRAM;          //设置IAP命令
 145   1          IAP_ADDRL = addr;               //设置IAP低地址
 146   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
 147   1          IAP_DATA = dat;                 //写ISP/IAP/EEPROM数据
 148   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
 149   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
 150   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
 151   1          IapIdle();
 152   1      }
 153          
 154          /*----------------------------
 155          扇区擦除
 156          ----------------------------*/
 157          void IapEraseSector(UINT addr)
 158          {
 159   1          IAP_CONTR = ENABLE_IAP;         //使能IAP
 160   1          IAP_CMD = CMD_ERASE;            //设置IAP命令
 161   1          IAP_ADDRL = addr;               //设置IAP低地址
 162   1          IAP_ADDRH = addr >> 8;          //设置IAP高地址
 163   1          IAP_TRIG = 0x5a;                //写触发命令(0x5a)
 164   1          IAP_TRIG = 0xa5;                //写触发命令(0xa5)
 165   1          _nop_();                        //等待ISP/IAP/EEPROM操作完成
 166   1          IapIdle();
 167   1      }
 168          
 169          /* 写数据进 数据Flash存储器, 只在同一个扇区内写，不保留原有数据 */
 170          /* begin_addr,被写数据Flash开始地址；counter,连续写多少个字节； array[]，数据来源   */
 171          UINT sequential_write_flash_in_one_sector(UINT begin_addr, UINT counter, UCHAR array[])
 172          {
 173   1          UINT i = 0;
 174   1          UINT in_sector_begin_addr = 0;
 175   1          UINT sector_addr = 0;
 176   1      
 177   1          /* 判是否是有效范围,此函数不允许跨扇区操作 */
C51 COMPILER V9.54   UPDATEMOUDLE                                                          03/20/2016 12:50:11 PAGE 4   

 178   1          if(counter > USED_BYTE_QTY_IN_ONE_SECTOR)
 179   1              return  ERROR;
 180   1          in_sector_begin_addr = begin_addr & 0x01ff;
 181   1          if((in_sector_begin_addr + counter) > USED_BYTE_QTY_IN_ONE_SECTOR)
 182   1              return ERROR;
 183   1      
 184   1          /* 擦除 要修改/写入 的扇区 */
 185   1          IapEraseSector(begin_addr);
 186   1      
 187   1          for(i=0; i<counter; i++)
 188   1          {
 189   2              /* 写一个字节 */
 190   2              IapProgramByte(begin_addr, array[i]);
 191   2              /*  比较对错 */
 192   2              if (IapReadByte(begin_addr) != array[i])
 193   2              {
 194   3                  IapIdle();
 195   3                  return ERROR;
 196   3              }
 197   2              begin_addr++;
 198   2          }
 199   1          IapIdle();
 200   1          return  OK;
 201   1      }
 202          
 203          ///* 写数据进数据Flash存储器(EEPROM), 只在同一个扇区内写，保留同一扇区中不需修改的数据    */
 204          ///* begin_addr,被写数据Flash开始地址；counter,连续写多少个字节； array[]，数据来源       */
 205          //UINT write_flash_with_protect_in_one_sector(UINT begin_addr, UINT counter, UCHAR array[])
 206          //{
 207          //    UINT i = 0;
 208          //    UINT in_sector_begin_addr = 0;
 209          //    UINT sector_addr = 0;
 210          //    UINT byte_addr = 0;
 211          
 212          //    /* 判是否是有效范围,此函数不允许跨扇区操作 */
 213          //    if(counter > USED_BYTE_QTY_IN_ONE_SECTOR)
 214          //        return ERROR;
 215          //    in_sector_begin_addr = begin_addr & 0x01ff;
 216          //    /* 假定从扇区的第0个字节开始，到USED_UCHAR_QTY_IN_ONE_SECTOR-1个字节结束,后面部分不用,程序易编写 */
 217          //    if((in_sector_begin_addr + counter) > USED_BYTE_QTY_IN_ONE_SECTOR)
 218          //        return ERROR;
 219          
 220          //    /* 将该扇区数据 0 - (USED_UCHAR_QTY_IN_ONE_SECTOR-1) 字节数据读入缓冲区保护 */
 221          //    sector_addr = (begin_addr & 0xfe00);
 222          //    byte_addr = sector_addr;
 223          
 224          //    for(i = 0; i < USED_BYTE_QTY_IN_ONE_SECTOR; i++)
 225          //    {
 226          //        protect_buffer[i] = IapReadByte(byte_addr++);
 227          //    }
 228          
 229          //    /* 将要写入的数据写入保护缓冲区的相应区域,其余部分保留 */
 230          //    for(i = 0; i < counter; i++)
 231          //    {
 232          //        protect_buffer[in_sector_begin_addr++] = array[i];
 233          //    }
 234          
 235          //    /* 擦除 要修改/写入 的扇区 */
 236          //    IapEraseSector(sector_addr);
 237          
 238          //    /* 将保护缓冲区的数据写入 Data Flash, EEPROM */
 239          //    byte_addr = sector_addr;
C51 COMPILER V9.54   UPDATEMOUDLE                                                          03/20/2016 12:50:11 PAGE 5   

 240          //    for(i = 0; i< USED_BYTE_QTY_IN_ONE_SECTOR; i++)
 241          //    {
 242          //        /* 写一个字节 */
 243          //        IapProgramByte(byte_addr, protect_buffer[i]);
 244          //        /*  比较对错 */
 245          //        if (IapReadByte(begin_addr) != protect_buffer[i])
 246          //        {
 247          //            IapIdle();
 248          //            return ERROR;
 249          //        }
 250          //        byte_addr++;
 251          //    }
 252          //    IapIdle();
 253          //    return OK;
 254          //}


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    494    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
