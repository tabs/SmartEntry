C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE FLASHFUNCTION
OBJECT MODULE PLACED IN .\Objects\FlashFunction.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE FlashFunction.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X2000) DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\FlashFunction.lst) TABS(2) OBJECT(.\Objects\FlashFunction.obj)

line level    source

   1          
   2          #include "flashfunction.h"
   3          
   4          
   5           
   6           
   7          void FLASH_ByteWrite (FLADDR addr, char byte)
   8          {
   9   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  10   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  11   1          IAP_ADDRH = (addr&0xff00)>>8;    //设置目标单元地址的高8 位地址
  12   1          IAP_ADDRL = (addr&0xff);    //设置目标单元地址的低8 位地址
  13   1      
  14   1          IAP_DATA = byte;                  //要编程的数据先送进IAP_DATA 寄存器
  15   1          EA=0;
  16   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  17   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  18   1            _nop_();
  19   1          EA=1; 
  20   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  21   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  22   1      }
  23          /****************************************************************************/
  24          /* FLASH_ByteRead                                                           */ 
  25          /*This routine reads a <byte> from the linear FLASH address <addr>.         */ 
  26          /*                                                                          */ 
  27          /****************************************************************************/
  28          unsigned char FLASH_ByteRead (FLADDR addr)
  29          {
  30   1          IAP_DATA = 0x00;
  31   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  32   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  33   1      
  34   1          IAP_ADDRH = (addr&0xff00)>>8;    //设置目标单元地址的高8 位地址
  35   1          IAP_ADDRL = (addr&0xff);    //设置目标单元地址的低8 位地址
  36   1      
  37   1          EA=0;
  38   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  39   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  40   1          _nop_(); 
  41   1          EA=1;
  42   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  43   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  44   1          return (IAP_DATA);
  45   1      }
  46          
  47          
  48          
  49          /****************************************************************************/
  50          /* FLASH_PageErase                                                          */ 
  51          /*This routine erases the FLASH page containing the linear FLASH addres     */ 
  52          /* <addr>.                                                                  */ 
  53          /****************************************************************************/
  54          void FLASH_PageErase (FLADDR addr)
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 2   

  55          {
  56   1        
  57   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  58   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
  59   1      
  60   1          IAP_ADDRH = (addr&0xff00)>>8;    //设置目标单元地址的高8 位地址
  61   1          IAP_ADDRL = (addr&0xff);    //设置目标单元地址的低8 位地址
  62   1      
  63   1          EA=0;
  64   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  65   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  66   1          _nop_();
  67   1      
  68   1          EA=1;
  69   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  70   1        //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  71   1      }
  72          void IAP_Disable()
  73          {
  74   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  75   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  76   1          IAP_CONTR = 0;      //关闭IAP 功能
  77   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
  78   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
  79   1          IAP_ADDRH = 0x80;
  80   1          IAP_ADDRL = 0;
  81   1      }
  82          
  83          
  84          
  85          /* 写数据进 数据Flash存储器, 只在同一个扇区内写，不保留原有数据 */
  86          /* begin_addr,被写数据Flash开始地址；counter,连续写多少个字节； array[]，数据来源   */
  87          UCHAR sequential_write_flash_in_one_sector(UINT begin_addr, UINT counter, UCHAR array[])
  88          {
  89   1          UINT i = 0;
  90   1          UINT in_sector_begin_addr = 0;
  91   1          UINT sector_addr = 0;
  92   1      
  93   1          FLASH_PageErase(begin_addr);
  94   1      //      SBUF = begin_addr>>24;while(!(SCON&0x02));SCON &= ~0x02;
  95   1      //      SBUF = begin_addr>>16;while(!(SCON&0x02));SCON &= ~0x02;
  96   1      //      SBUF = begin_addr>>8;while(!(SCON&0x02));SCON &= ~0x02;
  97   1      //      SBUF = begin_addr;while(!(SCON&0x02));SCON &= ~0x02;
  98   1          for(i=0; i<counter; i++)
  99   1          {
 100   2              /* 写一个字节 */
 101   2              FLASH_ByteWrite(begin_addr, array[i]);
 102   2              /*  比较对错 */
 103   2              if (FLASH_ByteRead(begin_addr) != array[i])
 104   2              {
 105   3                  IAP_Disable();
 106   3                  return 0;
 107   3              }
 108   2      //       SBUF = array[i];while(!(SCON&0x02));SCON &= ~0x02;
 109   2      
 110   2              begin_addr++;
 111   2          }
 112   1          IAP_Disable();
 113   1          return  1;
 114   1      }
 115          
 116          
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 3   

 117          /****************************************************/
 118          /*以下部分为FLASH_W25Q64读写程序*/
 119          /****************************************************/
 120          /***********************************************
 121          函数名称：sFLASH_SendByte
 122          功    能：向W25Q64 FLASH发送一个字节数据。
 123          入口参数：dat:发送的数据
 124          返 回 值：无  
 125          备    注：无
 126          ************************************************/
 127          void sFLASH_SendByte(unsigned char dat)
 128          {
 129   1      unsigned char i;         //定义计数器
 130   1      //送出数据
 131   1      for(i=0;i<8;i++)      
 132   1      { W25Q64_WCK_Clr();
 133   2      //先发送高字节
 134   2      if( (dat&0x80)==0x80 )
 135   2      {W25Q64_WDI_Set();}
 136   2      else
 137   2      {W25Q64_WDI_Clr();}
 138   2       Delay_1us(); 
 139   2      W25Q64_WCK_Set();
 140   2      //数据左移
 141   2        dat<<=1;                
 142   2      }  
 143   1      }
 144          /***********************************************
 145          函数名称：sFLASH_ReadByte
 146          功    能：从W25Q64 FLASH读取一个字节数据。
 147          入口参数：无
 148          返 回 值：unsigned char：读出的数据。 
 149          备    注：无
 150          ************************************************/
 151          unsigned char sFLASH_ReadByte(void)
 152          {
 153   1      unsigned char i;
 154   1      unsigned char dat = 0;
 155   1      W25Q64_WDO_Set();
 156   1      W25Q64_WCK_Clr();
 157   1      for (i=0; i<8; i++)             //8位计数器
 158   1      {W25Q64_WCK_Set();           //时钟线拉高
 159   2      Delay_1us();
 160   2      dat <<= 1;                  //数据右移一位
 161   2      if (WDO) 
 162   2      {dat |= 0x01;            //读取数据
 163   3      }
 164   2      W25Q64_WCK_Clr();           //时钟线拉低
 165   2      }
 166   1      return dat;
 167   1      }
 168          /***********************************************
 169          函数名称：sFLASH_WriteEnable
 170          功    能：写使能。
 171          入口参数：无
 172          返 回 值：无  
 173          备    注：无
 174          ************************************************/
 175          void sFLASH_WriteEnable(void)
 176          {   //使能芯片 
 177   1      W25Q64_WCS_Clr();
 178   1      //发送写使能指令 
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 4   

 179   1      sFLASH_SendByte(sFLASH_CMD_WREN);
 180   1      //禁止芯片 
 181   1      W25Q64_WCS_Set();
 182   1      }
 183          /***********************************************
 184          函数名称：sFLASH_WaitForWriteEnd
 185          功    能：等待写结束
 186          入口参数：无
 187          返 回 值：无  
 188          备    注：无
 189          ************************************************/
 190          void sFLASH_WaitForWriteEnd(void)
 191          {unsigned char flashstatus = 0;
 192   1      //芯片使能 
 193   1      W25Q64_WCS_Clr();
 194   1      //发送读取寄存器指令
 195   1      sFLASH_SendByte(sFLASH_CMD_RDSR);
 196   1      //循环读取忙标记直到忙结束 
 197   1      do
 198   1      { flashstatus = sFLASH_ReadByte();}
 199   1      //判断忙标记
 200   1      while ((flashstatus & sFLASH_WIP_FLAG) == 0x01); 
 201   1      //芯片禁止 
 202   1      W25Q64_WCS_Set();
 203   1      }
 204          /***********************************************
 205          函数名称：sFLASH_ReadID
 206          功    能：从W25Q64 FLASH读取器件ID号。
 207          入口参数：无
 208          返 回 值：unsigned int：读出的ID。  
 209          备    注：无
 210          ************************************************/
 211          unsigned int sFLASH_ReadID(void)
 212          {
 213   1      unsigned int Temp = 0; 
 214   1      unsigned char Temp0 = 0, Temp1 = 0;
 215   1      //使能flash
 216   1      W25Q64_WCS_Clr();
 217   1      //发送读flash  id号指令
 218   1      sFLASH_SendByte(sFLASH_CMD_RDID);
 219   1      //发送24位地址 地址为0
 220   1      sFLASH_SendByte(0);
 221   1      sFLASH_SendByte(0);
 222   1      sFLASH_SendByte(0);
 223   1      //读取返回的数据
 224   1      Temp0 = sFLASH_ReadByte();
 225   1      Temp1 = sFLASH_ReadByte();
 226   1      //禁止flash
 227   1      W25Q64_WCS_Set();
 228   1      //组合数据
 229   1      Temp = (Temp0 << 8) | Temp1;
 230   1      return Temp;
 231   1      }
 232          /***********************************************
 233          函数名称：sFLASH_WritePage
 234          功    能：向W25Q64 FLASH写入一页数据。
 235          入口参数：pBuffer:存放写入的数据的缓冲区，
 236                WriteAddr：开始写入的地址，
 237            NumByteToWrite：写入的字节数
 238          返 回 值：无：读出的数据。  
 239          备    注：无
 240          ************************************************/
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 5   

 241          void sFLASH_WritePage(unsigned char* pBuffer, FLADDR WriteAddr, unsigned int NumByteToWrite)
 242          {//芯片写使能，写之前需写使能，否则无法写入 
 243   1      sFLASH_WriteEnable();
 244   1      //芯片使能 
 245   1      W25Q64_WCS_Clr();
 246   1      //发送写指令 
 247   1      sFLASH_SendByte(sFLASH_CMD_PAGEPRO);
 248   1      //发送24位地址 
 249   1      sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 250   1      sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 251   1      sFLASH_SendByte(WriteAddr & 0xFF);
 252   1      //循环按字节写入 
 253   1      while (NumByteToWrite--)
 254   1      {sFLASH_SendByte(*pBuffer);
 255   2       pBuffer++;
 256   2      }
 257   1      //芯片禁止 
 258   1      W25Q64_WCS_Set();
 259   1      //等待写完成
 260   1      sFLASH_WaitForWriteEnd();
 261   1      }
 262          
 263          /***********************************************
 264          函数名称：sFLASH_ReadBuffer
 265          功    能：从W25Q64 FLASH读取一串数据。
 266          入口参数：pBuffer:接收该字符串的缓冲区
 267                ReadAddr：开始读的地址
 268            NumByteToRead：读的字节数
 269          返 回 值：无  
 270          备    注：无
 271          ************************************************/
 272          void sFLASH_ReadBuffer(unsigned char * pBuffer, FLADDR ReadAddr, unsigned int NumByteToRead)
 273          {//芯片使能 
 274   1      W25Q64_WCS_Clr();
 275   1      
 276   1      //发送读命令
 277   1      sFLASH_SendByte(sFLASH_CMD_READ);
 278   1      
 279   1      //发送24位地址 
 280   1      sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 281   1      sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 282   1      sFLASH_SendByte(ReadAddr & 0xFF);
 283   1      
 284   1      //循环按字节读取
 285   1      while (NumByteToRead--) 
 286   1      {
 287   2        *pBuffer = sFLASH_ReadByte();
 288   2        pBuffer++;
 289   2      }
 290   1      
 291   1      //芯片禁止 
 292   1      W25Q64_WCS_Set();
 293   1      }
 294          /***********************************************
 295          函数名称：sFLASH_EraseSector
 296          功    能：擦除W25Q64 FLASH的一个扇区。
 297          入口参数：无
 298          返 回 值：unsigned char：读出的数据。 
 299          备    注：无
 300          ************************************************/
 301          void sFLASH_EraseSector(FLADDR SectorAddr)
 302          {   //芯片写使能
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 6   

 303   1      sFLASH_WriteEnable();
 304   1      //芯片使能 
 305   1      W25Q64_WCS_Clr();
 306   1      //发送扇区擦除指令
 307   1      sFLASH_SendByte(sFLASH_CMD_SE);
 308   1      //发送24位地址
 309   1      sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 310   1      sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 311   1      sFLASH_SendByte(SectorAddr & 0xFF);
 312   1      //芯片禁止 
 313   1      W25Q64_WCS_Set();
 314   1      //等待写完成
 315   1      sFLASH_WaitForWriteEnd();
 316   1      }
 317          
 318          /***********************************************
 319          函数名称：sFLASH_64KBEraseSector
 320          功    能：擦除W25Q64 FLASH的一个块。
 321          入口参数：无
 322          返 回 值：无
 323          备    注：无
 324          ************************************************/
 325          void sFLASH_64KBEraseSector(FLADDR SectorAddr)
 326          {   //芯片写使能
 327   1      sFLASH_WriteEnable();
 328   1      //芯片使能 
 329   1      W25Q64_WCS_Clr();
 330   1      //发送扇区擦除指令
 331   1      sFLASH_SendByte(sFLASH_CMD_BE);
 332   1      //发送24位地址
 333   1      sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 334   1      sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 335   1      sFLASH_SendByte(SectorAddr & 0xFF);
 336   1      //芯片禁止 
 337   1      W25Q64_WCS_Set();
 338   1      //等待写完成
 339   1      sFLASH_WaitForWriteEnd();
 340   1      }
 341          
 342          /***********************************************
 343          函数名称：sFLASH_EraseSector
 344          功    能：擦除W25Q64 FLASH整个芯片,
 345          需要大概20s左右的时间。
 346          入口参数：无
 347          返 回 值：unsigned char：读出的数据。 
 348          备    注：无
 349          ************************************************/
 350          void sFLASH_EraseFlash(void)
 351          {   //芯片写使能
 352   1          sFLASH_WriteEnable();
 353   1          //芯片使能 
 354   1          W25Q64_WCS_Clr();
 355   1          //发送扇区擦除指令
 356   1          sFLASH_SendByte(sFLASH_CMD_CE);
 357   1      
 358   1          //芯片禁止 
 359   1          W25Q64_WCS_Set();
 360   1          //等待写完成
 361   1          sFLASH_WaitForWriteEnd();
 362   1      }
 363          
 364          
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 7   

 365          
 366          
 367          
 368          
 369          void FLASH_W25Q64_Clear (FLADDR dest, unsigned numbytes)
 370          {
 371   1        
 372   1       
 373   1         FLADDR dest_1_page_start;           // first address in 1st page
 374   1                                             // containing <dest>
 375   1         FLADDR dest_1_page_end;             // last address in 1st page
 376   1                                             // containing <dest>
 377   1         FLADDR dest_2_page_start;           // first address in 2nd page
 378   1                                             // containing <dest>
 379   1         FLADDR dest_2_page_end;             // last address in 2nd page
 380   1                                             // containing <dest>
 381   1         unsigned  numbytes_remainder;        // when crossing page boundary,
 382   1                                             // number of <src> bytes on 2nd page
 383   1         FLADDR FLASH_pagesize;            // size of FLASH page to update
 384   1       
 385   1         FLADDR  wptr;                       // write address
 386   1         FLADDR  rptr;                       // read address
 387   1       
 388   1         unsigned length;
 389   1         unsigned Full_BlockNum = 0,NoFull_BlockNum = 0;
 390   1         FLASH_pagesize = FLASH_W25Q64_PAGESIZE;
 391   1       
 392   1         dest_1_page_start = dest & ~(FLASH_pagesize - 1);
 393   1      
 394   1         dest_1_page_end = dest_1_page_start + FLASH_pagesize - 1;
 395   1      
 396   1         dest_2_page_start = (dest + numbytes)  & ~(FLASH_pagesize - 1);
 397   1      
 398   1         dest_2_page_end = dest_2_page_start + FLASH_pagesize - 1;
 399   1        
 400   1         if (dest_1_page_end == dest_2_page_end) {
 401   2            // 1. Erase Scratch page    擦除草稿临时页
 402   2            FLASH_W25Q64_PageErase (FLASH_W25Q64_TEMP);
 403   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 404   2           //从dest 0 到dest-1 比特复制到草稿临时页
 405   2            wptr = FLASH_W25Q64_TEMP;
 406   2            rptr = dest_1_page_start;
 407   2            length = dest - dest_1_page_start;
 408   2            Full_BlockNum = (length&0x0ff00)>>8;
 409   2            NoFull_BlockNum = length&0x00ff;
 410   2      
 411   2            if(Full_BlockNum>0)/*超过一页后，整数页处理*/
 412   2           { 
 413   3             FLASH_W25Q64_Copy (wptr, rptr, Full_BlockNum,1);
 414   3             //剩下的不是整数页按另外单独方式写入
 415   3             FLASH_W25Q64_Copy (wptr + Full_BlockNum*256, rptr+ Full_BlockNum*256, NoFull_BlockNum,0);
 416   3            }else{
 417   3              FLASH_W25Q64_Copy (wptr, rptr, NoFull_BlockNum,0);
 418   3            }
 419   2            // 3. Copy from (dest+numbytes) to dest_page_end to Scratch page
 420   2       
 421   2            wptr = FLASH_W25Q64_TEMP + dest - dest_1_page_start + numbytes;
 422   2            rptr = dest + numbytes;
 423   2            length = dest_1_page_end - dest - numbytes + 1;
 424   2            Full_BlockNum = (length&0x0ff00)>>8;
 425   2            NoFull_BlockNum = length&0x00ff;
 426   2            if(Full_BlockNum>0)/*超过一页后，整数页处理*/
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 8   

 427   2           { 
 428   3             FLASH_W25Q64_Copy (wptr, rptr, Full_BlockNum,1);
 429   3             FLASH_W25Q64_Copy (wptr + Full_BlockNum*256, rptr+ Full_BlockNum*256, NoFull_BlockNum,0);
 430   3            }else{
 431   3              FLASH_W25Q64_Copy (wptr, rptr, NoFull_BlockNum,0);
 432   3            }
 433   2       
 434   2            // 4. Erase destination page
 435   2            FLASH_W25Q64_PageErase (dest_1_page_start);
 436   2       
 437   2            // 5. Copy Scratch page to destination page
 438   2            wptr = dest_1_page_start;
 439   2            rptr = FLASH_W25Q64_TEMP;
 440   2            length = FLASH_pagesize;
 441   2            Full_BlockNum = (length&0x0ff00)>>8;
 442   2            NoFull_BlockNum = length&0x00ff;
 443   2                  if(Full_BlockNum>0)/*超过一页后，整数页处理*/
 444   2           { 
 445   3             FLASH_W25Q64_Copy (wptr, rptr, Full_BlockNum,1);
 446   3             FLASH_W25Q64_Copy (wptr + Full_BlockNum*256, rptr+ Full_BlockNum*256, NoFull_BlockNum,0);
 447   3            }else{
 448   3              FLASH_W25Q64_Copy (wptr, rptr, NoFull_BlockNum,0);
 449   3            }
 450   2       
 451   2          
 452   2      } else {
 453   2                                  // value crosses page boundary
 454   2            // 1. Erase Scratch page
 455   2            FLASH_W25Q64_PageErase (FLASH_W25Q64_TEMP);
 456   2       
 457   2            // 2. Copy bytes from first byte of dest page to dest-1 to Scratch page
 458   2       
 459   2            wptr = FLASH_W25Q64_TEMP;
 460   2            rptr = dest_1_page_start;
 461   2            length = dest - dest_1_page_start;
 462   2            Full_BlockNum = (length&0x0ff00)>>8;
 463   2            NoFull_BlockNum = length&0x00ff;
 464   2                  if(Full_BlockNum>0)/*超过一页后，整数页处理*/
 465   2           { 
 466   3             FLASH_W25Q64_Copy (wptr, rptr, Full_BlockNum,1);
 467   3             //剩下的不是整数页按另外单独方式写入
 468   3             FLASH_W25Q64_Copy (wptr + Full_BlockNum*256, rptr+ Full_BlockNum*256, NoFull_BlockNum,0);
 469   3            }else{
 470   3              FLASH_W25Q64_Copy (wptr, rptr, NoFull_BlockNum,0);
 471   3            }
 472   2       
 473   2            // 3. Erase destination page 1
 474   2            FLASH_W25Q64_PageErase (dest_1_page_start);
 475   2       
 476   2            // 4. Copy Scratch page to destination page 1
 477   2            wptr = dest_1_page_start;
 478   2            rptr = FLASH_W25Q64_TEMP;
 479   2            length = FLASH_pagesize;
 480   2            Full_BlockNum = (length&0x0ff00)>>8;
 481   2            NoFull_BlockNum = length&0x00ff;
 482   2                  if(Full_BlockNum>0)/*超过一页后，整数页处理*/
 483   2           { 
 484   3             FLASH_W25Q64_Copy (wptr, rptr, Full_BlockNum,1);
 485   3             FLASH_W25Q64_Copy (wptr + Full_BlockNum*256, rptr+ Full_BlockNum*256, NoFull_BlockNum,0);
 486   3            }else{
 487   3              FLASH_W25Q64_Copy (wptr, rptr, NoFull_BlockNum,0);
 488   3            }
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 9   

 489   2       
 490   2            // now handle 2nd page
 491   2       
 492   2            // 5. Erase Scratch page
 493   2            FLASH_W25Q64_PageErase (FLASH_W25Q64_TEMP);
 494   2       
 495   2            // 6. Copy bytes from numbytes remaining to dest-2_page_end to Scratch page
 496   2       
 497   2            numbytes_remainder = numbytes - (dest_1_page_end - dest + 1);
 498   2            wptr = FLASH_W25Q64_TEMP + numbytes_remainder;
 499   2            rptr = dest_2_page_start + numbytes_remainder;
 500   2            length = FLASH_pagesize - numbytes_remainder;
 501   2            Full_BlockNum = (length&0x0ff00)>>8;
 502   2            NoFull_BlockNum = length&0x00ff;
 503   2                  if(Full_BlockNum>0)/*超过一页后，整数页处理*/
 504   2           { 
 505   3             FLASH_W25Q64_Copy (wptr, rptr, Full_BlockNum,1);
 506   3             FLASH_W25Q64_Copy (wptr + Full_BlockNum*256, rptr+ Full_BlockNum*256, NoFull_BlockNum,0);
 507   3            }else{
 508   3              FLASH_W25Q64_Copy (wptr, rptr, NoFull_BlockNum,0);
 509   3            }
 510   2       
 511   2            // 7. Erase destination page 2
 512   2            FLASH_W25Q64_PageErase (dest_2_page_start);
 513   2       
 514   2            // 8. Copy Scratch page to destination page 2
 515   2            wptr = dest_2_page_start;
 516   2            rptr = FLASH_W25Q64_TEMP;
 517   2            length = FLASH_pagesize;
 518   2            Full_BlockNum = (length&0x0ff00)>>8;
 519   2            NoFull_BlockNum = length&0x00ff;
 520   2            if(Full_BlockNum>0)/*超过一页后，整数页处理*/
 521   2           { 
 522   3             FLASH_W25Q64_Copy (wptr, rptr, Full_BlockNum,1);
 523   3             FLASH_W25Q64_Copy (wptr + Full_BlockNum*256, rptr+ Full_BlockNum*256, NoFull_BlockNum,0);
 524   3            }else{
 525   3              FLASH_W25Q64_Copy (wptr, rptr, NoFull_BlockNum,0);
 526   3            }
 527   2          
 528   2      }
 529   1       
 530   1      }
 531          
 532          
 533          
 534          //-----------------------------------------------------------------------------
 535          // FLASH_W25Q64_Write
 536          //-----------------------------------------------------------------------------
 537          //
 538          // This routine copies <numbytes> from <src> to the linear FLASH_W25Q64 address
 539          // <dest>.
 540          //
 541          void FLASH_W25Q64_Write (FLADDR dest, char *src, FLADDR numbytes)
 542          {
 543   1         FLADDR i;
 544   1         for (i = dest; i < dest+numbytes; i++) {
 545   2            FLASH_W25Q64_ByteWrite (i, *src++);
 546   2         }
 547   1      }
 548          
 549          
 550          
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 10  

 551          void FLASH_W25Q64_Update (FLADDR dest, char *src, unsigned numbytes)
 552          {
 553   1         // 1. Erase <numbytes> starting from <dest>
 554   1         FLASH_W25Q64_Clear (dest, numbytes);
 555   1         // 2. Write <numbytes> from <src> to <dest>
 556   1         FLASH_W25Q64_Write (dest, src, numbytes);
 557   1      }
 558          //-----------------------------------------------------------------------------
 559          // FLASH_W25Q64_Read
 560          //-----------------------------------------------------------------------------
 561          //
 562          // This routine copies <numbytes> from the linear FLASH_W25Q64 address <src> to
 563          // <dest>.
 564          //
 565          char * FLASH_W25Q64_Read (char *dest, FLADDR src, unsigned numbytes)
 566          {
 567   1         FLADDR i;
 568   1         for (i = 0; i < numbytes; i++) {
 569   2            *dest++ = FLASH_W25Q64_ByteRead (src+i);
 570   2         }
 571   1         return dest;
 572   1      }
 573          //-----------------------------------------------------------------------------
 574          // FLASH_W25Q64_Copy
 575          //-----------------------------------------------------------------------------
 576          //
 577          // This routine copies <numbytes> from <src> to the linear FLASH_W25Q64 address
 578          // <dest>.
 579          //
 580          void FLASH_W25Q64_Copy (FLADDR dest, FLADDR src,unsigned numbytes,bit IsFullBlockCopy)
 581          {
 582   1         FLADDR i;
 583   1        unsigned char DataBuffer[256];
 584   1        if(IsFullBlockCopy){
 585   2        for(i=0;i<numbytes;i++)
 586   2             { 
 587   3             sFLASH_ReadBuffer(DataBuffer, (src + i*256), 256);
 588   3             sFLASH_WritePage(DataBuffer, (dest+i*256), 256);
 589   3       }
 590   2        }else{
 591   2          sFLASH_ReadBuffer(DataBuffer,src , numbytes);
 592   2          sFLASH_WritePage(DataBuffer, dest, numbytes);
 593   2         }
 594   1       }
 595          
 596          //-----------------------------------------------------------------------------
 597          // FLASH_W25Q64_Fill
 598          //-----------------------------------------------------------------------------
 599          //
 600          // This routine fills the FLASH_W25Q64 beginning at <addr> with <lenght> bytes.
 601          //
 602          void FLASH_W25Q64_Fill (FLADDR addr, ULONG length, unsigned char fill)
 603          {
 604   1         FLADDR i;
 605   1         for (i = 0; i < length; i++) {
 606   2            FLASH_W25Q64_ByteWrite (addr+i, fill);
 607   2         }
 608   1      }
 609          
 610          
 611          
 612          
C51 COMPILER V9.54   FLASHFUNCTION                                                         06/16/2016 19:33:40 PAGE 11  

 613          
 614          void FLASH_W25Q64_PageErase (FLADDR addr){
 615   1      
 616   1      sFLASH_EraseSector(addr);
 617   1      }
 618          
 619          void FLASH_W25Q64_ByteWrite (FLADDR addr, char byte)
 620          {
 621   1      
 622   1        sFLASH_WritePage(&byte,addr,1);
 623   1      }
 624          
 625          unsigned char FLASH_W25Q64_ByteRead (FLADDR addr)
 626          {
 627   1        unsigned char dat;
 628   1      
 629   1        sFLASH_ReadBuffer(&dat,addr,1);
 630   1        return dat;
 631   1      }
 632          
 633          
 634          void Delay_1us(void)    //延时1us
 635          {
 636   1      unsigned char i=1;
 637   1      while(i--);  //WDT_CONTR=0x34;
 638   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4123    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     422
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
